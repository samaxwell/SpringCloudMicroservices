server:
  port: 9090

spring:
  application:
    name: blog-service
  cloud:
    config:
      discovery:
        enabled: true
        service-id: config-service
  config:
    import: 'optional:configserver:'

  zipkin:
    enabled: true
    base-url: http://localhost:9411
  sleuth:
    enabled: true
    sampler:
      probability: 1.0
    baggage:
      remote-fields:             # List of fields that are referenced the same in-process as it is on the wire
        - app-session-id
      local-fields:              # List of fields that should be accessible within the JVM process but not propagated over the wire
        - app-session-id
      correlation-fields:        # List of fields that should be propagated over the wire
        - app-session-id
      correlation-enabled: true  # Enables correlating the baggage context with logging contexts.
      tag-fields:                # List of fields that should automatically become tags.
        - app-session-id

# Add a custom logging pattern to include the session ID. Unfortunately we'll need to do everything.
# We can copy Spring Boot's default pattern from:
#   - org/springframework/boot/logging/logback/defaults.xml
# Docs here: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.logging.custom-log-configuration
# In particular, search for 'you should use Spring Bootâ€™s syntax'
# Color coding:
#   - https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.logging.console-output.color-coded
logging:
  pattern:
    console: "${CONSOLE_LOG_PATTERN:%clr(%d{${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr([${spring.application.name},%X{app-session-id},%X{traceId},%X{spanId}]){green} %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}"

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
